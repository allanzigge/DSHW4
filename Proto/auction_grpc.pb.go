// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: proto/auction.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ElectionServiceClient is the client API for ElectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElectionServiceClient interface {
	Election(ctx context.Context, opts ...grpc.CallOption) (ElectionService_ElectionClient, error)
	SetLeader(ctx context.Context, in *Addr, opts ...grpc.CallOption) (*Ack, error)
	Heartbeat(ctx context.Context, in *Addr, opts ...grpc.CallOption) (*Ack, error)
}

type electionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewElectionServiceClient(cc grpc.ClientConnInterface) ElectionServiceClient {
	return &electionServiceClient{cc}
}

func (c *electionServiceClient) Election(ctx context.Context, opts ...grpc.CallOption) (ElectionService_ElectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ElectionService_ServiceDesc.Streams[0], "/proto.ElectionService/Election", opts...)
	if err != nil {
		return nil, err
	}
	x := &electionServiceElectionClient{stream}
	return x, nil
}

type ElectionService_ElectionClient interface {
	Send(*Addr) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type electionServiceElectionClient struct {
	grpc.ClientStream
}

func (x *electionServiceElectionClient) Send(m *Addr) error {
	return x.ClientStream.SendMsg(m)
}

func (x *electionServiceElectionClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *electionServiceClient) SetLeader(ctx context.Context, in *Addr, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/proto.ElectionService/SetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electionServiceClient) Heartbeat(ctx context.Context, in *Addr, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/proto.ElectionService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElectionServiceServer is the server API for ElectionService service.
// All implementations must embed UnimplementedElectionServiceServer
// for forward compatibility
type ElectionServiceServer interface {
	Election(ElectionService_ElectionServer) error
	SetLeader(context.Context, *Addr) (*Ack, error)
	Heartbeat(context.Context, *Addr) (*Ack, error)
	mustEmbedUnimplementedElectionServiceServer()
}

// UnimplementedElectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedElectionServiceServer struct {
}

func (UnimplementedElectionServiceServer) Election(ElectionService_ElectionServer) error {
	return status.Errorf(codes.Unimplemented, "method Election not implemented")
}
func (UnimplementedElectionServiceServer) SetLeader(context.Context, *Addr) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLeader not implemented")
}
func (UnimplementedElectionServiceServer) Heartbeat(context.Context, *Addr) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedElectionServiceServer) mustEmbedUnimplementedElectionServiceServer() {}

// UnsafeElectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectionServiceServer will
// result in compilation errors.
type UnsafeElectionServiceServer interface {
	mustEmbedUnimplementedElectionServiceServer()
}

func RegisterElectionServiceServer(s grpc.ServiceRegistrar, srv ElectionServiceServer) {
	s.RegisterService(&ElectionService_ServiceDesc, srv)
}

func _ElectionService_Election_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ElectionServiceServer).Election(&electionServiceElectionServer{stream})
}

type ElectionService_ElectionServer interface {
	SendAndClose(*Ack) error
	Recv() (*Addr, error)
	grpc.ServerStream
}

type electionServiceElectionServer struct {
	grpc.ServerStream
}

func (x *electionServiceElectionServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *electionServiceElectionServer) Recv() (*Addr, error) {
	m := new(Addr)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ElectionService_SetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Addr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServiceServer).SetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ElectionService/SetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServiceServer).SetLeader(ctx, req.(*Addr))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElectionService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Addr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ElectionService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServiceServer).Heartbeat(ctx, req.(*Addr))
	}
	return interceptor(ctx, in, info, handler)
}

// ElectionService_ServiceDesc is the grpc.ServiceDesc for ElectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ElectionService",
	HandlerType: (*ElectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLeader",
			Handler:    _ElectionService_SetLeader_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _ElectionService_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Election",
			Handler:       _ElectionService_Election_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/auction.proto",
}

// FrontEndServiceClient is the client API for FrontEndService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontEndServiceClient interface {
	SetLeader(ctx context.Context, in *Addr, opts ...grpc.CallOption) (*Ack, error)
}

type frontEndServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontEndServiceClient(cc grpc.ClientConnInterface) FrontEndServiceClient {
	return &frontEndServiceClient{cc}
}

func (c *frontEndServiceClient) SetLeader(ctx context.Context, in *Addr, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/proto.FrontEndService/SetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontEndServiceServer is the server API for FrontEndService service.
// All implementations must embed UnimplementedFrontEndServiceServer
// for forward compatibility
type FrontEndServiceServer interface {
	SetLeader(context.Context, *Addr) (*Ack, error)
	mustEmbedUnimplementedFrontEndServiceServer()
}

// UnimplementedFrontEndServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFrontEndServiceServer struct {
}

func (UnimplementedFrontEndServiceServer) SetLeader(context.Context, *Addr) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLeader not implemented")
}
func (UnimplementedFrontEndServiceServer) mustEmbedUnimplementedFrontEndServiceServer() {}

// UnsafeFrontEndServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontEndServiceServer will
// result in compilation errors.
type UnsafeFrontEndServiceServer interface {
	mustEmbedUnimplementedFrontEndServiceServer()
}

func RegisterFrontEndServiceServer(s grpc.ServiceRegistrar, srv FrontEndServiceServer) {
	s.RegisterService(&FrontEndService_ServiceDesc, srv)
}

func _FrontEndService_SetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Addr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontEndServiceServer).SetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FrontEndService/SetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontEndServiceServer).SetLeader(ctx, req.(*Addr))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontEndService_ServiceDesc is the grpc.ServiceDesc for FrontEndService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontEndService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FrontEndService",
	HandlerType: (*FrontEndServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLeader",
			Handler:    _FrontEndService_SetLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auction.proto",
}
